
services:
  php-cli:
    build:
      context: .
      dockerfile: ./docker/php-cli/Dockerfile
      args:
        - HOST_USER_UID=${HOST_USER_UID}
        - HOST_USER_GID=${HOST_USER_GID}
    volumes:
      - .:/app
      - composer:/tmp/composer-cache
    environment:
      PHP_IDE_CONFIG: 'serverName=notification-gw.docker'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    profiles:
      - 'cli-tools' # the profile is needed in order not to start this service with "docker compose up" command
    ports:
      - '80:8080'
###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  composer:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
